<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PCLStorage</name>
    </assembly>
    <members>
        <member name="T:PCLStorage.Exceptions.FileNotFoundException">
            <exclude/>
        </member>
        <member name="M:PCLStorage.Exceptions.FileNotFoundException.#ctor(System.String)">
            <exclude/>
        </member>
        <member name="M:PCLStorage.Exceptions.FileNotFoundException.#ctor(System.String,System.Exception)">
            <exclude/>
        </member>
        <member name="T:PCLStorage.Exceptions.DirectoryNotFoundException">
            <exclude/>
        </member>
        <member name="M:PCLStorage.Exceptions.DirectoryNotFoundException.#ctor(System.String)">
            <exclude/>
        </member>
        <member name="M:PCLStorage.Exceptions.DirectoryNotFoundException.#ctor(System.String,System.Exception)">
            <exclude/>
        </member>
        <member name="T:PCLStorage.FileSystem">
            <summary>
            Provides access to an implementation of <see cref="T:PCLStorage.IFileSystem"/> for the current platform
            </summary>
        </member>
        <member name="P:PCLStorage.FileSystem.Current">
            <summary>
            The implementation of <see cref="T:PCLStorage.IFileSystem"/> for the current platform
            </summary>
        </member>
        <member name="T:PCLStorage.PortablePath">
            <summary>
            Provides portable versions of APIs such as Path.Combine
            </summary>
        </member>
        <member name="M:PCLStorage.PortablePath.Combine(System.String[])">
            <summary>
            Combines multiple strings into a path
            </summary>
            <param name="paths">Path elements to combine</param>
            <returns>A combined path</returns>
        </member>
        <member name="P:PCLStorage.PortablePath.DirectorySeparatorChar">
            <summary>
            The character used to separate elements in a file system path
            </summary>
        </member>
        <member name="T:PCLStorage.WinRTFile">
            <summary>
            Represents a file in the <see cref="T:PCLStorage.WinRTFileSystem"/>
            </summary>
        </member>
        <member name="M:PCLStorage.WinRTFile.#ctor(Windows.Storage.IStorageFile)">
            <summary>
            Creates a new <see cref="T:PCLStorage.WinRTFile"/>
            </summary>
            <param name="wrappedFile">The WinRT <see cref="T:Windows.Storage.IStorageFile"/> to wrap</param>
        </member>
        <member name="M:PCLStorage.WinRTFile.OpenAsync(PCLStorage.FileAccess)">
            <summary>
            Opens the file
            </summary>
            <param name="fileAccess">Specifies whether the file should be opened in read-only or read/write mode</param>
            <returns>A <see cref="T:System.IO.Stream"/> which can be used to read from or write to the file</returns>
        </member>
        <member name="M:PCLStorage.WinRTFile.DeleteAsync">
            <summary>
            Deletes the file
            </summary>
            <returns>A task which will complete after the file is deleted.</returns>
        </member>
        <member name="P:PCLStorage.WinRTFile.Name">
            <summary>
            The name of the file
            </summary>
        </member>
        <member name="P:PCLStorage.WinRTFile.Path">
            <summary>
            The "full path" of the file, which should uniquely identify it within a given <see cref="T:PCLStorage.IFileSystem"/>
            </summary>
        </member>
        <member name="T:PCLStorage.WinRTFileSystem">
            <summary>
            Implementation of <see cref="T:PCLStorage.IFileSystem"/> over WinRT Storage APIs
            </summary>
        </member>
        <member name="M:PCLStorage.WinRTFileSystem.GetFileFromPathAsync(System.String)">
            <summary>
            Gets a file, given its path.  Returns null if the file does not exist.
            </summary>
            <param name="path">The path to a file, as returned from the <see cref="P:PCLStorage.IFile.Path"/> property.</param>
            <returns>A file for the given path, or null if it does not exist.</returns>
        </member>
        <member name="M:PCLStorage.WinRTFileSystem.GetFolderFromPathAsync(System.String)">
            <summary>
            Gets a folder, given its path.  Returns null if the folder does not exist.
            </summary>
            <param name="path">The path to a folder, as returned from the <see cref="P:PCLStorage.IFolder.Path"/> property.</param>
            <returns>A folder for the specified path, or null if it does not exist.</returns>
        </member>
        <member name="P:PCLStorage.WinRTFileSystem.LocalStorage">
            <summary>
            A folder representing storage which is local to the current device
            </summary>
        </member>
        <member name="P:PCLStorage.WinRTFileSystem.RoamingStorage">
            <summary>
            A folder representing storage which may be synced with other devices for the same user
            </summary>
        </member>
        <member name="T:PCLStorage.WinRTFolder">
            <summary>
            Represents a folder in the <see cref="T:PCLStorage.WinRTFileSystem"/>
            </summary>
        </member>
        <member name="M:PCLStorage.WinRTFolder.#ctor(Windows.Storage.IStorageFolder)">
            <summary>
            Creates a new <see cref="T:PCLStorage.WinRTFolder"/>
            </summary>
            <param name="wrappedFolder">The WinRT <see cref="T:Windows.Storage.IStorageFolder"/> to wrap</param>
        </member>
        <member name="M:PCLStorage.WinRTFolder.CreateFileAsync(System.String,PCLStorage.CreationCollisionOption)">
            <summary>
            Creates a file in this folder
            </summary>
            <param name="desiredName">The name of the file to create</param>
            <param name="option">Specifies how to behave if the specified file already exists</param>
            <returns>The newly created file</returns>
        </member>
        <member name="M:PCLStorage.WinRTFolder.GetFileAsync(System.String)">
            <summary>
            Gets a file in this folder
            </summary>
            <param name="name">The name of the file to get</param>
            <returns>The requested file, or null if it does not exist</returns>
        </member>
        <member name="M:PCLStorage.WinRTFolder.GetFilesAsync">
            <summary>
            Gets a list of the files in this folder
            </summary>
            <returns>A list of the files in the folder</returns>
        </member>
        <member name="M:PCLStorage.WinRTFolder.CreateFolderAsync(System.String,PCLStorage.CreationCollisionOption)">
            <summary>
            Creates a subfolder in this folder
            </summary>
            <param name="desiredName">The name of the folder to create</param>
            <param name="option">Specifies how to behave if the specified folder already exists</param>
            <returns>The newly created folder</returns>
        </member>
        <member name="M:PCLStorage.WinRTFolder.GetFolderAsync(System.String)">
            <summary>
            Gets a subfolder in this folder
            </summary>
            <param name="name">The name of the folder to get</param>
            <returns>The requested folder, or null if it does not exist</returns>
        </member>
        <member name="M:PCLStorage.WinRTFolder.GetFoldersAsync">
            <summary>
            Gets a list of subfolders in this folder
            </summary>
            <returns>A list of subfolders in the folder</returns>
        </member>
        <member name="M:PCLStorage.WinRTFolder.DeleteAsync">
            <summary>
            Deletes this folder and all of its contents
            </summary>
            <returns>A task which will complete after the folder is deleted</returns>
        </member>
        <member name="P:PCLStorage.WinRTFolder.Name">
            <summary>
            The name of the folder
            </summary>
        </member>
        <member name="P:PCLStorage.WinRTFolder.Path">
            <summary>
            The "full path" of the folder, which should uniquely identify it within a given <see cref="T:PCLStorage.IFileSystem"/>
            </summary>
        </member>
    </members>
</doc>
